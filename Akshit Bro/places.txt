Srikakulam
1.Srikurmanatha Temple
2.Arasavilli Suryanarayana Temple
3.Umarudra Koteswara Temple
4.Sri Mukhalingeswara Temple
5.Telukunchi Bird Sanctuary
6.Kargil Victory Park
7.Srikakulam Andhra Mahavishnuvu Temple

Visakhapatnam(Vizag)
1.rk beach
2.Boora caves
3.Submarine Museum 
4.Kailasagiri
5.Rushikonda Beach 
6.Yarada Beach
7.Dolphin's Nose
8.Katiki Waterfalls
9.Matsyadarshini Aquarium
10.Indira Gandhi Zoological Park 
11.VUDA park
12. Simhachalam Temple
13. Lambasingi
14. Bheemili Beach
15.Kambalakonda Wildlife Sanctuary
16. TU 142 Aircraft Museum
17.Tenneti Park
18.Ananthagiri Hills
19.Chaparai Waterfalls
20.Tadimada Waterfalls
21.Matsyagundam
22.Tribal Museum 
23.Padmapuram Gardens
24.Araku Valley

East Godavari
1.maredumilli
2.sri veera Venkata sathyanarayana swamy vari Devasthanam
3.coringa wildlife sanctuary
4.Deaksharama temple
5.pushkar ghat
6.sri Laxmi Narasimha swamy temple
7.sri kukkuteswara swamy temple
8.sripada srivallabha temple
9.hope island
10.rajahmundry Godavari bridge
11.ainavilli sidhi Vinayaka temple
12.appanapalli temple
13.kakinada beach
14.papi hills
15.markandeya temple
16.jagan Mohini kesaca swami temple
17.kondapalli fort
18.pattiseema
19.haritha beach resort
20.rampa waterfalls
21.uppada beach

West Godavari
1.dwaraka tirumala temple
2.mavullamma ammavari temple
3.sri someswara janardana swamy temple
4.ksheera ramalingeswara swamy temple
5.maddi Anjaneya temple

krishna
1.krishna rive






import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import "./PlaceDetail.css";

const PlaceDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();

    const [place, setPlace] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeImage, setActiveImage] = useState(null);
    const [showGalleryModal, setShowGalleryModal] = useState(false);
    const [similarPlaces, setSimilarPlaces] = useState([]);

    const defaultImage = "/Images/1.jpg";

    useEffect(() => {
        window.scrollTo(0, 0);
        fetchPlaceDetails();
    }, [id]);

    useEffect(() => {
        if (place?.name) {
            document.title = `${place.name} | Place Details`;
            fetchSimilarPlaces();
        }
    }, [place]);

    // Format location information based on place data
    const getFormattedLocation = () => {
        if (!place) return "";
        
        const locationParts = [];
        
        if (place.location) {
            locationParts.push(place.location);
        } else if (place.city) {
            locationParts.push(place.city);
        }
        
        if (place.district && !place.location?.includes(place.district)) {
            locationParts.push(place.district);
        }
        
        if (place.state && !place.location?.includes(place.state)) {
            locationParts.push(place.state);
        }
        
        return locationParts.join(", ");
    };

    const fetchPlaceDetails = async () => {
        try {
            const numericId = parseInt(id);
            if (isNaN(numericId)) {
                setError("Invalid place ID");
                setIsLoading(false);
                return;
            }

            const response = await axios.get(`http://localhost:5000/places/${numericId}`);
            if (response.data && response.data.place) {
                setPlace(response.data.place);
                setError(null);
            } else {
                setError("Place not found");
            }
        } catch (error) {
            console.error("Error fetching place details:", error);
            setError("Failed to load place details. Please try again later.");
        } finally {
            setIsLoading(false);
        }
    };

    const fetchSimilarPlaces = async () => {
        try {
            if (!place) return;

            if (!place.latitude || !place.longitude) {
                console.log("Current place doesn't have coordinates, falling back to category matching");
                fetchSimilarPlacesByCategory();
                return;
            }

            const response = await axios.get("http://localhost:5000/places/nearby", {
                params: {
                    latitude: place.latitude,
                    longitude: place.longitude
                }
            });

            if (response.data) {
                setSimilarPlaces(response.data.slice(0, 5));
            }
        } catch (error) {
            console.error("Error fetching similar places:", error);
            fetchSimilarPlacesByCategory(); // Fall back to category matching if error occurs
        }
    };

    const fetchSimilarPlacesByCategory = async () => {
        try {
            const response = await axios.get("http://localhost:5000/places");
            if (response.data) {
                const similar = response.data
                    .filter(p => p.id !== parseInt(id)) // Exclude current place
                    .filter(p => {
                        const sameCategory = place.category && p.category === place.category;
                        return sameCategory;
                    })
                    .slice(0, 5); // Limit to 5 similar places

                setSimilarPlaces(similar);
            }
        } catch (error) {
            console.error("Error fetching similar places by category:", error);
            setSimilarPlaces([]); // Set empty array on error
        }
    };

    const openGalleryModal = (imageUrl) => {
        setActiveImage(imageUrl);
        setShowGalleryModal(true);
    };

    const closeGalleryModal = () => {
        setShowGalleryModal(false);
        setActiveImage(null);
    };

    const galleryImages = [
        place?.image_url || defaultImage,
        "/Images/carousel-img2.jpg",
        "/Images/carousel-img3.jpg",
        "/Images/carousel-img4.jpg",
        "/Images/Kothapalli-waterfalls.jpg"
    ];

    const videos = [
        {
            id: 1,
            title: `${place?.name} Travel Guide`,
            thumbnail: "/Images/carousel-img2.jpg",
            url: "https://www.youtube.com/watch?v=example1"
        },
        {
            id: 2,
            title: `Exploring ${place?.name}`,
            thumbnail: "/Images/carousel-img3.jpg",
            url: "https://www.youtube.com/watch?v=example2"
        },
        {
            id: 3,
            title: `${place?.name} Hidden Spots`,
            thumbnail: "/Images/carousel-img4.jpg",
            url: "https://www.youtube.com/watch?v=example3"
        }
    ];

    const relatedPlacesSettings = {
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 3,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        responsive: [
            {
                breakpoint: 768,
                settings: {
                    slidesToShow: 1
                }
            }
        ]
    };

    if (isLoading) {
        return <div className="place-detail-page loading"><div className="loading-spinner" /></div>;
    }

    if (error || !place) {
        return (
            <div className="place-detail-page">
                <div className="error-container">
                    <h2>Place not found</h2>
                    <p>Sorry, we couldn't find the place you're looking for.</p>
                    <button onClick={() => navigate("/places")} className="back-button">← Back to Places</button>
                </div>
            </div>
        );
    }

    return (
        <div className="place-detail-page">
            <aside className="ad-space-left">Ad Space</aside>

            <main className="place-content">
                <section className="place-hero">
                    <div className="hero-overlay"></div>
                    <img
                        src={place.image_url || defaultImage}
                        alt={place.name}
                        className="hero-image"
                        loading="eager"
                        onError={(e) => {
                            e.target.onerror = null;
                            e.target.src = defaultImage;
                        }}
                    />
                    <div className="hero-content">
                        <button onClick={() => navigate("/places")} className="back-button" aria-label="Go back to places list">
                            <span className="back-icon">←</span> Back to Places
                        </button>
                        <h1>{place.name}</h1>
                        <p className="hero-subtitle">{getFormattedLocation()}</p>
                    </div>
                </section>

                <div className="content-wrapper">
                    <section className="info-section">
                        <h2>About</h2>
                        <p>{place.description || "No description available"}</p>
                    </section>

                    {place.highlights?.length > 0 && (
                        <section className="info-section">
                            <h2>Highlights</h2>
                            <div className="highlights-grid">
                                {place.highlights.map((highlight, index) => (
                                    <div key={index} className="highlight-card">
                                        <span className="highlight-icon">✨</span>
                                        <span className="highlight-text">{highlight}</span>
                                    </div>
                                ))}
                            </div>
                        </section>
                    )}

                    <section className="info-section">
                        <h2>Location</h2>
                        <div className="location-card">
                            <span className="location-icon">📍</span>
                            <p className="location-text">{getFormattedLocation()}</p>
                        </div>
                    </section>

                    {place.latitude && place.longitude && (
                        <section className="info-section">
                            <h2>Map</h2>
                            <iframe
                                title="map"
                                src={`https://www.google.com/maps?q=${place.latitude},${place.longitude}&z=14&output=embed`}
                                width="100%"
                                height="300"
                                style={{ border: 0 }}
                                allowFullScreen
                                loading="lazy"
                            ></iframe>
                        </section>
                    )}

                    <div className="info-grid">
                        {place.best_time_to_visit && (
                            <div className="info-card">
                                <div className="info-icon">⏰</div>
                                <h3>Best Time to Visit</h3>
                                <p>{place.best_time_to_visit}</p>
                            </div>
                        )}
                        {place.how_to_reach && (
                            <div className="info-card">
                                <div className="info-icon">🚗</div>
                                <h3>How to Reach</h3>
                                <p>{place.how_to_reach}</p>
                            </div>
                        )}
                        {place.entry_fee && (
                            <div className="info-card">
                                <div className="info-icon">💰</div>
                                <h3>Entry Fee</h3>
                                <p>{place.entry_fee}</p>
                            </div>
                        )}
                        {place.timings && (
                            <div className="info-card">
                                <div className="info-icon">🕒</div>
                                <h3>Timings</h3>
                                <p>{place.timings}</p>
                            </div>
                        )}
                    </div>

                    <section className="info-section gallery-section">
                        <h2>Image Gallery</h2>
                        <div className="gallery-grid">
                            {galleryImages.map((image, index) => (
                                <div key={index} className="gallery-item" onClick={() => openGalleryModal(image)}>
                                    <img
                                        src={image}
                                        alt={`${place.name} - Image ${index + 1}`}
                                        className="gallery-image"
                                        onError={(e) => {
                                            e.target.onerror = null;
                                            e.target.src = defaultImage;
                                        }}
                                    />
                                </div>
                            ))}
                        </div>
                    </section>

                    <section className="info-section video-section">
                        <h2>Videos</h2>
                        <div className="video-grid">
                            {videos.map((video) => (
                                <div key={video.id} className="video-card">
                                    <div className="video-thumbnail">
                                        <img
                                            src={video.thumbnail}
                                            alt={video.title}
                                            className="video-image"
                                            onError={(e) => {
                                                e.target.onerror = null;
                                                e.target.src = defaultImage;
                                            }}
                                        />
                                        <div className="play-button">▶</div>
                                    </div>
                                    <h3>{video.title}</h3>
                                    <a href={video.url} target="_blank" rel="noopener noreferrer" className="watch-button">
                                        Watch Video
                                    </a>
                                </div>
                            ))}
                        </div>
                    </section>

                    {similarPlaces.length > 0 && (
                        <section className="info-section similar-places-section">
                            <h2>You May Also Like</h2>
                            <div className="similar-places-slider">
                                <Slider {...relatedPlacesSettings}>
                                    {similarPlaces.map((similarPlace) => (
                                        <div key={similarPlace.id} className="similar-place-slide">
                                            <div
                                                className="similar-place-card"
                                                onClick={() => {
                                                    navigate(`/places/${similarPlace.id}`);
                                                    window.scrollTo(0, 0);
                                                }}
                                            >
                                                <img
                                                    src={similarPlace.image_url || defaultImage}
                                                    alt={similarPlace.name}
                                                    className="similar-place-image"
                                                    onError={(e) => {
                                                        e.target.onerror = null;
                                                        e.target.src = defaultImage;
                                                    }}
                                                />
                                                <div className="similar-place-info">
                                                    <h3>{similarPlace.name}</h3>
                                                    <p className="similar-place-location">📍 {similarPlace.location || similarPlace.city}</p>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </Slider>
                            </div>
                        </section>
                    )}
                </div>

                {showGalleryModal && (
                    <div className="gallery-modal" onClick={closeGalleryModal}>
                        <span className="close-modal" onClick={closeGalleryModal}>&times;</span>
                        <img src={activeImage} alt="Full view" className="modal-image" />
                    </div>
                )}
            </main>

            <aside className="ad-space-right">Ad Space</aside>
        </div>
    );
};

export default PlaceDetail;